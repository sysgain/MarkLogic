{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "westus",
            "allowedValues": [
                "Brazil South",
                "brazilsouth",
                "East Asia",
                "eastasia",
                "East US",
                "eastus",
                "Japan East",
                "japaneast",
                "Japan West",
                "japanwest",
                "North Central US",
                "northcentralus",
                "North Europe",
                "northeurope",
                "South Central US",
                "southcentralus",
                "West Europe",
                "westeurope",
                "West US",
                "westus",
                "Southeast Asia",
                "southeastasia",
                "Central US",
                "centralus",
                "East US 2",
                "eastus2"
            ],
            "metadata": {
                "description": "Deployment Location Hint: Use lowercase for creating ipaddress"
            }
        },
        "clusterPrefix": {
            "type": "string",
            "defaultValue": "ml",
            "metadata": {
                "description": "MarkLogic Cluster Prefix"
            }
        },
        "clusterNodeCount": {
            "type": "int",
            "defaultValue": 1,
            "allowedValues": [
                1,
                3,
                5,
                7,
                9
            ],
            "metadata": {
                "description": "Number of Nodes in the Multi Node Cluster (Multi Node). Minimum 3 Nodes and Maximum 10 Nodes"
            }
        },
        "singleNodeSize": {
            "type": "string",
            "defaultValue": "Standard_DS11_v2",
            "allowedValues": [
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5"
            ],
            "metadata": {
                "description": "Size of the Marklogic Single Node VM"
            }
        },
        "clusterNodeSize": {
            "type": "string",
            "defaultValue": "Standard_DS3_v2",
            "allowedValues": [
                "Standard_DS3_v2",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5"
            ],
            "metadata": {
                "description": "Size of the MarkLogic Multi Node VMs"
            }
        },
        "dataDiskStorageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "Type of the Data Disk that is going to be attached. Standard or Premium"
            }
        },
        "markLogicLicensee": {
            "type": "string",
            "metadata": {
                "description": "License Key for MarkLogic"
            }
        },
        "markLogicLicenseKey": {
            "type": "string",
            "metadata": {
                "description": "License Key for MarkLogic"
            }
        },
        "virtualNetworkNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Identifies whether to use new or existing Virtual Network"
            }
        },
        "virtualNetworkExistingRGName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of resource group of existing Virtual Network (if applicable)"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the virtual network that the consumer wants to use"
            }
        },
        "virtualNetworkAddressPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Virtual network address CIDR"
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "shsubnet",
            "metadata": {
                "description": "Subnet for the Search Head"
            }
        },
        "subnetPrefix": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "Subnet for the Search Head"
            }
        },
        "loadBalancerType": {
            "type": "string",
            "defaultValue": "external",
            "allowedValues": [
                "external",
                "internal"
            ],
            "metadata": {
                "description": "Type of Load Balancer to be used. External or Internal"
            }
        },
        "internalLoadBalancerPrivateIP": {
            "type": "string",
            "defaultValue": "10.0.1.10",
            "metadata": {
                "description": "Static Private Ip for Internal Loadbalancer"
            }
        },
        "loadBalancerpublicIPdnsPrefix": {
            "type": "string",
            "defaultValue": "mlloadbalancer",
            "metadata": {
                "description": "Public DNS prefix for MarkLogic external load balancer"
            }
        },
        "nodepublicIPdnsPrefix": {
            "type": "string",
            "defaultValue": "mlnode",
            "metadata": {
                "description": "Public DNS prefix for MarkLogic nodes"
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "sysgain",
            "metadata": {
                "description": "OS Admin User Name for MarkLogic Nodes"
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "password",
                "sshkey"
            ],
            "metadata": {
                "description": "Authentication type"
            }
        },
        "password": {
            "type": "securestring",
            "defaultValue": "Sysga1n4205!",
            "metadata": {
                "description": "OS Admin password"
            }
        },
        "sshkey":{
            "type": "securestring",
            "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAvnZEoqeHJtHa8LizTlvTlXZ62Vffq0X2o915TfI47QMv+cId0i6j/ZalD4WnuJwdMFlpowT+G04fNImxzSIIpzhsuDuime2ewC7TiCZTz3eRwAzmcGAWthp5W0PlBRvQk1qGvDh95RmHlFoqZ9x/29av89cglUsrOA2qq8zAV2FGpYKZR5FrZuU7vnl10Ie2CpUoE8kEID/DWrZTUDSSQ+kZ5VJwloVwrs/lZo1KbP7hns5yQMEH5oHI8qG43ljKoJfyra4Lyel0SxNa9CeTJBgc1oRh1pZUcmcV/MGmvesFrQKI3Gz/jMzk1tBTp8WwzBVWZF+owV2vtM0ryuSElQ== rsa-key-20161128",
            "metadata": {
                "description": "OS Admin ssh key"
            }
        },
        "adminUsernameMarkLogicPortal": {
            "type": "string",
            "defaultValue": "sysgain",
            "metadata": {
                "description": "Admin User Name for MarkLogic Admin Portal"
            }
        },
        "adminPasswordMarkLogicPortal": {
            "type": "securestring",
            "defaultValue": "Sysga1n4205!",
            "metadata": {
                "description": "Admin password for MarkLogic Admin Portal"
            }
        }      
    },
    "variables": {       
        "baseUrl":"https://raw.githubusercontent.com/sysgain/MarkLogic/mldevchange",
        "adminPasswordOrSshKey":"[parameters(parameters('authenticationType'))]",
        "uniqueString": "[substring(uniquestring(resourceGroup().id),0,8)]",
        "publicIpTemplate": "[concat('lbPublicIp',parameters('loadBalancerType'))]",
        "lbPublicIpexternal": "publicip.json",
        "lbPublicIpinternal": "publicip-empty.json",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',parameters ('subnetName'))]",
        "nodeNicName": "mlnic-",
        "loadBalancerName": "[concat('markLogiclb','-',parameters('loadBalancerType'))]",
        "loadBalancerBackendPoolName": "mlBackendPool",
        "nodeVmSize": "[concat('cluster-size-',parameters('clusterNodeCount'))]",
        "cluster-size-1": {
            "vmSize": "[parameters('singleNodeSize')]",
            "nodes": "singlenode"
        },
        "cluster-size-3": {
            "vmSize": "[parameters('clusterNodeSize')]",
            "nodes": "cluster"
        },
        "cluster-size-4": {
            "vmSize": "[parameters('clusterNodeSize')]",
            "nodes": "cluster"
        },
        "cluster-size-5": {
            "vmSize": "[parameters('clusterNodeSize')]",
            "nodes": "cluster"
        },
        "cluster-size-6": {
            "vmSize": "[parameters('clusterNodeSize')]",
            "nodes": "cluster"
        },
        "cluster-size-7": {
            "vmSize": "[parameters('clusterNodeSize')]",
            "nodes": "cluster"
        },
        "cluster-size-8": {
            "vmSize": "[parameters('clusterNodeSize')]",
            "nodes": "cluster"
        },
        "cluster-size-9": {
            "vmSize": "[parameters('clusterNodeSize')]",
            "nodes": "cluster"
        },
        "cluster-size-10": {
            "vmSize": "[parameters('clusterNodeSize')]",
            "nodes": "cluster"
        },
        "apiVersions": {
            "deploymentApiVersion": "2015-01-01",
            "networkApiVersion": "2015-06-15",
            "storageApiVersion": "2015-06-15",
            "computeApiVersion": "2015-06-15"
        },
        "networkSettings": {
            "location": "[parameters('location')]",
            "networkApiVersion": "[variables('apiVersions').networkApiVersion]",
            "virtualNetworkName": "[parameters('virtualNetworkName')]",
            "virtualNetworkExistingRGName": "[parameters('virtualNetworkExistingRGName')]",
            "virtualNetworkAddressPrefix": "[parameters('virtualNetworkAddressPrefix')]",
            "count": "[parameters('clusterNodeCount')]",
            "availabilitySetName": "mlAvailabilitySet",
            "platformFaultDomainCount": "3",
            "platformUpdateDomainCount": "20",
            "subnets": {
                "subnet1": {
                    "name": "[parameters('subnetName')]",
                    "prefix": "[parameters('subnetPrefix')]"
                }
            },
            "nodeNetworkSettings": {
                "location": "[parameters('location')]",
                "count": "[parameters('clusterNodeCount')]",
                "networkApiVersion": "[variables('apiVersions').networkApiVersion]",
                "publicIPAddressName": "mlnodepublicip",
                "publicIPdnsPrefix": "[concat(parameters('nodepublicIPdnsPrefix'),'-',variables('uniqueString'))]",
                "nicName": "[variables('nodeNicName')]",
                "networkSecurityGroupName": "mlnsg",
                "subnetRef": "[variables('subnetRef')]",
                "clusterPrefix": "[parameters('clusterPrefix')]",
                "loadBalancerName": "[variables('loadBalancerName')]",
                "loadBalancerBackendPoolName": "[variables('loadBalancerBackendPoolName')]"
            },
            "loadBalancerNetworkSettings": {
                "location": "[parameters('location')]",
                "networkApiVersion": "[variables('apiVersions').networkApiVersion]",
                "publicIPAddressName": "mllbpublicip",
                "publicIPdnsPrefix": "[concat(parameters('loadBalancerpublicIPdnsPrefix'),'-',variables('uniqueString'))]",
                "loadBalancerName": "[variables('loadBalancerName')]",
                "lbIpConfigName": "mlLbfrontendIp",
                "loadBalancerBackendPoolName": "[variables('loadBalancerBackendPoolName')]",
                "clusterPrefix": "[parameters('clusterPrefix')]",
                "count": "[parameters('clusterNodeCount')]",
                "subnetRef": "[variables('subnetRef')]",
                "privateIPAddress": "[parameters('internalLoadBalancerPrivateIP')]"
            }
        },
        "storageSettings": {
            "osDiskStorage": {
                "location": "[parameters('location')]",
                "storageAccountType": "Standard_LRS",
                "storageApiVersion": "[variables('apiVersions').storageApiVersion]",
                "storageAccountName": "[concat('osdisk',variables('uniqueString'))]"
            },
            "dataDiskStorage": {
                "location": "[parameters('location')]",
                "storageAccountType": "[parameters('dataDiskStorageAccountType')]",
                "storageApiVersion": "[variables('apiVersions').storageApiVersion]",
                "storageAccountName": "[concat('datadisk',variables('uniqueString'))]"
            }
        },
        "virtualMachineSettings": {
            "location": "[parameters('location')]",
            "computeApiVersion": "[variables('apiVersions').computeApiVersion]",
            "vmName": "[parameters('clusterPrefix')]",
            "vmSize": "[variables(variables('nodeVmSize')).vmSize]",
            "authenticationType": "password",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPasswordOrSshKey": "[variables('adminPasswordOrSshKey')]",
            "imagePublisher": "marklogic",
            "imageOffer": "marklogic_80-preview",
            "imageSKU": "ml_centos",
            "imageVersion": "latest",
            "osDiskStorageAccountName": "[variables('storageSettings').osDiskStorage.storageAccountName]",
            "dataDiskStorageAccountName": "[variables('storageSettings').dataDiskStorage.storageAccountName]",
            "vmStorageAccountContainerName": "vhds",
            "networkInterfaceName": "[variables('nodeNicName')]",
            "dataDiskSizeGB": "1023",
            "count": "[parameters('clusterNodeCount')]",
            "availabilitySetName": "[variables('networkSettings').availabilitySetName]",
            "dataDiskExtension": {
                "location": "[parameters('location')]",
                "computeApiVersion": "[variables('apiVersions').computeApiVersion]",
                "vmName": "[parameters('clusterPrefix')]",
                "count": "[parameters('clusterNodeCount')]",
                "vmExtensionName": "extension",
                "customScriptsUrl": [
                    "[variables('templateUrls').dataDiskMountScriptUrl]"
                ],
                "commandToExecute": "sh data-disk-mount.sh"
            },
            "firstNodeConfigExtension": {
                "location": "[parameters('location')]",
                "computeApiVersion": "[variables('apiVersions').computeApiVersion]",
                "vmName": "[parameters('clusterPrefix')]",
                "count": 1,
                "vmExtensionName": "extension",
                "customScriptsUrl": [
                    "[variables('templateUrls').firstNodeConfigScriptUrl]"
                ],
                "commandToExecute": "[concat('sh setup-first-node.sh localhost', ' ', parameters('adminUsernameMarkLogicPortal'), ' ', parameters('adminPasswordMarkLogicPortal'), ' ','anyauth public 5 10')]"
            },
            "additionalNodesConfigExtension": {
                "location": "[parameters('location')]",
                "computeApiVersion": "[variables('apiVersions').computeApiVersion]",
                "vmName": "[parameters('clusterPrefix')]",
                "count": "[sub(parameters('clusterNodeCount'),1)]",
                "vmExtensionName": "extension",
                "customScriptsUrl": [
                    "[variables('templateUrls').additionalNodesConfigScriptUrl]"
                ],
                "commandToExecute": "[concat('sh setup-additional-nodes.sh',' ', parameters('clusterPrefix'), '0', ' ', parameters('adminUsernameMarkLogicPortal'), ' ', parameters('adminPasswordMarkLogicPortal'), ' ','anyauth 5 10 localhost')]"
            }
           
        },
        "templateUrls": {
            "sharedResourcesTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'shared-resources.json')]",
            "virtualNetworkTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'vnet-', parameters('virtualNetworkNewOrExisting'), '.json')]",
            "loadBalancerTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'loadbalancer-',parameters('loadBalancerType'),'.json')]",
            "storageAccountTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'storage-account.json')]",
            "publicIpMultiTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'publicip-multi.json')]",
            "networkResourcesTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'network-resources.json')]",
            "externalLoadBlancerpublicIpTemplateUrl": "[concat(variables('baseUrl'), '/nested/', variables(variables('publicIpTemplate')))]",
            "nodeNetworkInterfacesTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'network-interface-multi.json')]",
            "nodeNetworkSecurityTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'network-security-group.json')]",
            "availabilitySetTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'availability-set.json')]",
            "virtualMachineDeploymentTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'virtual-machine-deployment-',variables(variables('nodeVmSize')).nodes,'.json')]",
            "virtualMachineTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'virtual-machine-',parameters('authenticationType'),'.json')]",
            "virtualMachineExtensionMultiIndex0TemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'extension-multi-index-0.json')]",
            "virtualMachineExtensionMultiIndex1TemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'extension-multi-index-1.json')]",
            "virtualMachineExtensionMultiIndex0ForestTemplateUrl": "[concat(variables('baseUrl'), '/nested/', 'extension-multi-index-0-forest.json')]",
            "dataDiskMountScriptUrl": "[concat(variables('baseUrl'), '/scripts/', 'data-disk-mount.sh')]",
            "firstNodeConfigScriptUrl": "[concat(variables('baseUrl'), '/scripts/', 'setup-first-node.sh')]",
            "additionalNodesConfigScriptUrl": "[concat(variables('baseUrl'), '/scripts/', 'setup-additional-nodes.sh')]"
            
        }
    },
    "resources": [
        {
            "name": "shared-resources",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deploymentAPIVersion]",
            "comments": "Virtual network deployment",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').sharedResourcesTemplateUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    },
                    "templateUrls": {
                        "value": "[variables('templateUrls')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    },
                    "storageAccountSettings": {
                        "value": "[variables('storageSettings')]"
                    }
                }
            }
        },
        {
            "name": "network-resources",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deploymentAPIVersion]",
            "comments": "Network resources deployment",
            "dependsOn": [
                "shared-resources"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').networkResourcesTemplateUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    },
                    "templateUrls": {
                        "value": "[variables('templateUrls')]"
                    },
                    "networkSettings": {
                        "value": "[variables('networkSettings')]"
                    }
                }
            }
        },
        {
            "name": "virtual-machines",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deploymentAPIVersion]",
            "comments": "Virtaul machines and Extensions deployment",
            "dependsOn": [
                "network-resources"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('templateUrls').virtualMachineDeploymentTemplateUrl]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiVersions": {
                        "value": "[variables('apiVersions')]"
                    },
                    "templateUrls": {
                        "value": "[variables('templateUrls')]"
                    },
                    "virtualMachineSettings": {
                        "value": "[variables('virtualMachineSettings')]"
                    }
                }
            }
        }
    ],
    "outputs": {}
}